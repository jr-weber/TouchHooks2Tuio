/*******************************************************************************
TouchHook.cpp

Purpose: Monitors Windows touch events and resends them as custom messages.
         Also blocks emulated mouse clicks.
         
Windows 8 touch events:  WM_POINTERDOWN, WM_POINTERUPDATE WM_POINTERUP
Windows emulated mouse events (generated by touches):  LLMHF_INJECTED

This class has been modified by J.R.Weber <joe.weber77@gmail.com>.

The original authors (see copyright notice further below) had a TUIO server
here in this class (and on the same thread as the hook), but I have placed 
the TUIO servers in the hooksCore::TouchMessageListener class, which is 
operated on the GUI thread.  To get the original Windows 8 touch event
messages over to the GUI thread, this class simply resends the info as
custom messages, which are defined further below: UWM_CUSTOM_POINTERDOWN,
UWM_CUSTOM_POINTERUPDATE, and UWM_CUSTOM_POINTERUP.  These custom messages
are picked up by the nativeEvent() function of the TouchHooksMainWindow, 
which is a subclass of the Qt framework's QMainWindow class.  The TUIO servers
stay up for the duration of the program run, but the output can be shut ON/OFF
at runtime through the Network menu.

Note that backwards compatibility to the older Windows 7 touch has not been
implemented here.  This class only works for Windows 8 touch messages.
*******************************************************************************/
/*
 Touch2Tuio - Windows 8 Touch to TUIO Bridge
 http://dm.tzi.de/research/hci/touch2tuio
 
 Copyright (c) 2010 Marc Herrlich and Benjamin Walther-Franks, 
 Research Group Digital Media, TZI, University of Bremen
 
 This program is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#include "TouchHook.h"
#include <memory>

// forward declarations
LRESULT CALLBACK GetMsgProc( int, WPARAM, LPARAM );
LRESULT CALLBACK LowLevelMouseProc( int, WPARAM, LPARAM );

static void initWritingToConsole();
static void attachGlobalMouseHook();
static void processPointerDownFrame( LPMSG );
static void processPointerUpdateFrame( LPMSG );
static void processPointerUpFrame( LPMSG );
static void processTouchFrame( LPMSG );
static bool removeTouchHook();
static bool removeMouseHook();
static void printMessage( const char * );
static void printPostMessageInfo( const char *, LPMSG, BOOL );

// from dllmain.cpp
extern HMODULE  g_this;
extern HHOOK    g_globalTouchHook;
extern HHOOK    g_globalMouseHook;
extern DWORD    g_consoleId;

bool s_isWriteConsoleAttached( false );
bool s_isMouseHookInitialized( false );

HANDLE s_out( 0 );
const int char_buffer_size( 256 );
char  s_buf[char_buffer_size] = "";
DWORD s_ccount( 0 );

const UINT UWM_CUSTOM_POINTERDOWN   = RegisterWindowMessage( (LPCTSTR)"UWM_CUSTOM_POINTERDOWN_MSG-C20773FF-A3AD-14d4-A30B-133027716D94" );
const UINT UWM_CUSTOM_POINTERUPDATE = RegisterWindowMessage( (LPCTSTR)"UWM_CUSTOM_POINTERUPDATE_MSG-B20673FE-D3AD-31d4-A05B-164027715D94" );
const UINT UWM_CUSTOM_POINTERUP     = RegisterWindowMessage( (LPCTSTR)"UWM_CUSTOM_POINTERUP_MSG-A20473FF-D3AC-17d4-A77B-167028716993" );
const UINT UWM_CUSTOM_TOUCH         = RegisterWindowMessage( (LPCTSTR)"UWM_CUSTOM_TOUCH_MSG-E257E26FF-D3AF-71d4-A42B-157027716D92" );
const UINT UWM_CUSTOM_TIMER         = RegisterWindowMessage( (LPCTSTR)"UWM_CUSTOM_TIMER_MSG-F20773FF-D34D-18d4-A89B-137027716D98" );

TOUCHHOOK_API unsigned int UwmCustomPointerDown()   { return UWM_CUSTOM_POINTERDOWN; }
TOUCHHOOK_API unsigned int UwmCustomPointerUpdate() { return UWM_CUSTOM_POINTERUPDATE; }
TOUCHHOOK_API unsigned int UwmCustomPointerUp()     { return UWM_CUSTOM_POINTERUP; }
TOUCHHOOK_API unsigned int UwmCustomTouch()         { return UWM_CUSTOM_TOUCH; }
TOUCHHOOK_API unsigned int UwmCustomTimer()         { return UWM_CUSTOM_TIMER; }


TOUCHHOOK_API void SetConsoleId( DWORD consoleId )
{
    g_consoleId = consoleId;
}

TOUCHHOOK_API bool InstallGlobalTouchHook()
{
    RemoveGlobalTouchHook();

    if( g_globalTouchHook == 0 ) {
        g_globalTouchHook = SetWindowsHookEx( WH_GETMESSAGE, GetMsgProc, g_this, 0 );
    }
    return (g_globalTouchHook != 0) ? true : false;
}

LRESULT CALLBACK GetMsgProc( int nCode, WPARAM wParam, LPARAM lParam )
{
    //if( !s_isWriteConsoleAttached ) { initWritingToConsole(); }
    if (!s_isMouseHookInitialized ) { attachGlobalMouseHook(); }

    if( nCode == HC_ACTION ) {
       LPMSG msg = (LPMSG)lParam;

       switch( msg->message ) {
           case WM_POINTERDOWN:    processPointerDownFrame( msg );    break;
           case WM_POINTERUPDATE:  processPointerUpdateFrame( msg );  break;
           case WM_POINTERUP:      processPointerUpFrame( msg );      break;
           case WM_TOUCH:          processTouchFrame( msg );          break;
       }
    }
    return CallNextHookEx( 0, nCode, wParam, lParam ); 
}

static void initWritingToConsole()
{
    if( !AttachConsole( g_consoleId ) )  {
        FreeConsole();
        AttachConsole( g_consoleId );
    }
    s_out = GetStdHandle( STD_OUTPUT_HANDLE ); // TODO: we don't really close it
    printMessage( "TouchHooks DLL: Attached console for writing.\n" );
    s_isWriteConsoleAttached = true;
}

static void attachGlobalMouseHook()
{
    if( g_globalMouseHook == 0 ) {
        // mouse_ll global only (requires process with message loop).
        g_globalMouseHook = SetWindowsHookEx( WH_MOUSE_LL, LowLevelMouseProc, g_this, 0 );

        if( g_globalMouseHook != 0 ) {
            printMessage( "TouchHooks DLL: Installed mouse hook.\n" );
        }
        else {
            printMessage( "TouchHooks DLL: Could not install mouse hook.\n" );
        }
        s_isMouseHookInitialized = true;
    }
}

LRESULT CALLBACK LowLevelMouseProc( int nCode, WPARAM wParam, LPARAM lParam )
{
    if( nCode < 0 ) {
        return CallNextHookEx( 0, nCode, wParam, lParam ); // Do not process message.
    }
    LPMSLLHOOKSTRUCT msg = (LPMSLLHOOKSTRUCT)lParam;

    if( msg->flags & LLMHF_INJECTED ) {
        // Block injected events (in most cases generated by touches).
        //printMessage( "Blocked injected (touch) mouse event\n" );
        return 1;
    }
    // Forward the event.
    return CallNextHookEx( 0, nCode, wParam, lParam );
}

static void processPointerDownFrame( LPMSG msg )
{
    BOOL ok = PostMessage( HWND_BROADCAST, UWM_CUSTOM_POINTERDOWN, msg->wParam, msg->lParam );
    //printPostMessageInfo( "UWM_CUSTOM_POINTERDOWN", msg, ok );
}

static void processPointerUpdateFrame( LPMSG msg )
{
    BOOL ok = PostMessage( HWND_BROADCAST, UWM_CUSTOM_POINTERUPDATE, msg->wParam, msg->lParam );
    //printPostMessageInfo( "UWM_CUSTOM_POINTERUPDATE", msg, ok );
}

static void processPointerUpFrame( LPMSG msg )
{
    BOOL ok = PostMessage( HWND_BROADCAST, UWM_CUSTOM_POINTERUP, msg->wParam, msg->lParam );
    //printPostMessageInfo( "UWM_CUSTOM_POINTERUP", msg, ok );
}

/**
 * Windows 7 touch is not supported.
 */
static void processTouchFrame( LPMSG msg )
{
    //BOOL ok = PostMessage( HWND_BROADCAST, UWM_CUSTOM_TOUCH, msg->wParam, msg->lParam );
    //printPostMessageInfo( "UWM_CUSTOM_TOUCH", msg, ok );
}

TOUCHHOOK_API bool RemoveGlobalTouchHook()
{
    BOOL globalTouchHookRemoved = removeTouchHook(),
         globalMouseHookRemoved = removeMouseHook();

    return (globalTouchHookRemoved && globalMouseHookRemoved);
}

static bool removeTouchHook()
{
    BOOL globalTouchHookRemoved = false;

    if( g_globalTouchHook != 0 ) {
        globalTouchHookRemoved = UnhookWindowsHookEx( g_globalTouchHook );
    }
    g_globalTouchHook = 0;
    return globalTouchHookRemoved;
}

static bool removeMouseHook()
{
    BOOL mouseHookRemoved = false;

    if( g_globalMouseHook != 0 ) {
        mouseHookRemoved = UnhookWindowsHookEx( g_globalMouseHook );
    }
    g_globalMouseHook = 0;
    s_isMouseHookInitialized = false;
    return mouseHookRemoved;
}

static void printMessage( const char * title )
{
    sprintf_s( s_buf, title );
    WriteConsole( s_out, s_buf, strlen(s_buf), &s_ccount, 0 );
}

static void printPostMessageInfo( const char * msgType, LPMSG msg, BOOL ok )
{
    UINT32 pointerId = GET_POINTERID_WPARAM( msg->wParam );
    POINTS p = MAKEPOINTS( msg->lParam );
    const char * result = ok ? "message posted" : "message not posted";

    sprintf_s( s_buf, "TouchHook DLL:  %s %s; (x, y) = (%i, %i); id = %i\n", 
               msgType, result, p.x, p.y, pointerId );
    WriteConsole( s_out, s_buf, strlen(s_buf), &s_ccount, 0 );
}
